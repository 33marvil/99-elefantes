# Refactoriza para que solamente te quede un renglón elegante
# def dummy_encrypt(string)
#     #word_reverse = string.reverse
#     #swapped_word = word_reverse.swapcase
#     #encrypted_word = swapped_word.gsub(/[aeio]/,"*")
#     #return encrypted_word

#     encrypted_word = string.reverse.swapcase.gsub(/[aeio]/,"*")
# end

# Descompón el método en tres métodos nuevos para hacer más comprensible el código
# Lee el método y comprende que hace y que resultado regresa
#sentence.split.select{|word| word.length > 3}.map{ |w| w.count("e") }.max 

 class MaxLetter
#   sentence = @sentence
  class << self


   def max_letter_frequency_per_word(sentence)
      @sentence = sentence.split 

     self
   end 


  # def words_longer_than#(array,num)
  #   ["entero", "entrar", "envase", "enviar", "enzima", "equino", "equipo", "erario", "erguir", "eriaza", "eriazo", "erigir", "eringe", "eficientemente", "electroencefalografía"].select {|word| word.length > 3}

  # end

  def letter_per_word(sentence)
    p @sentence.map{ |w| w.count("e") }
  end

  def numbers_larger_than(num_array)
    
  end
 
end

max_letter = MaxLetter.new

# Estas son pruebas que no debes de modificar 
# Antes y después de modificar los métodos anteriores estas lineas deben de imprimir "true"
#puts dummy_encrypt("EsteEsMiPassword") == "DROWSSApImS*ETS*"
puts MaxLetter.max_letter_frequency_per_word("entero entrar envase enviar enzima equino equipo erario erguir eriaza eriazo erigir eringe eficientemente electroencefalografía") #== 5
#puts  letter_per_word("entero entrar envase enviar enzima equino equipo erario erguir eriaza eriazo erigir eringe eficientemente electroencefalografía") #== 5

